/// <reference path="DataPlugins.js" />

////
// US Census Bureau Configuration
var APIKey = '2b9ee0ef86f98ab8a8d16451067b23081acb2bfa'; // US Census API key

// various US Census Bureau constants scoped into an object.
// (in case the API changes any of these values, it'll be easier to fix here)
var USCB = Object();
USCB.ACS = 'acs5'; // American Community Survey
USCB.SF1 = 'sf1'; // Summary File 1
USCB.COUNTY = 'county'; // County selector
USCB.STATE = 'state'; // State selector
USCB.YEAR = '2010'; // coded here for now, move to user selection later?
USCB.PROPS = {}; // download and cache properties associated with datasets

var crimeConfig = {
    year: 2012
}

//Ratios for conversions
var degToRadRatio = 0.0174532925199432957692369076848861271344287188854172545609719144017100911460344944368224156963450948221230449250737905924838546922752810123984742189340471173191682450150107695616975535812386053051687886912711720870329635896026424901877043509181733439396980475940192241589469684813789632978181124952292984699278144795310454160084495609046069671761964687105143908889518362808267803695632452608441195089412947626131431088441838454784298996256210728062141559692354442374975963993652929160623774343500663840546315186802258702393667855274799734707621705676658941316820585512065349620930688037489914870522507333364895952514642268210320630153210533842979843262303802272290275190563697199187280599571093847717974556664228451612331159113023231100757209709517220028817067297222222131832113886169985096267560906588612469969741494905702362350458519149168625662843787278333507657708493699307400465634478732092730405755458527246041970485064420159104575210421875108765658765585120623711478500107104256177550512023344385449736511170304770182159218675187879331568350108446405658498277542979033300771736095654182415507306420825402358563927552823862950936762658660504172132319702081385517736392244495983426174389436045778492131200197983758894706121219053088677719264879858302680854431929269283558196369233780371347726082849628537612721619561375120114275890225446563899639514076801668643757791527581847995233292922459440155376797487868667185651202289995810350835015899054141983708324361416366032607055316162622822083850164184509185832622375331124248925861062215657488764087020544857030140436808434356531926271720987377433337869281112008069399565178734154019452302331864919342297842075141785193096769414913251295772633007963030431245381251054642749197894401067899126252791903160426210583033425192600277145957377321449210243545998220926747450052993543686719482225790284733617632943605338007138257052533568998071390122814510350374682145668844163613729095210386719798020662071525986925420775689660603657369221989632804334866116636986893275070526022130699761656990145584582744873706637681582366748721716813340910802080850281566860902913986077758412857211621703291718734538692306428325465967255438108876276416607231208551581563237149103830154119777325329180330775523947220695815602554848535816436036324263123479227729144891735771355025069118697209043377650871746444316673867560524538603808658244797412337345879360480453247557139223157929969570414871049736229917919441925929323554803144228686382568365414249890866313031565240228473059781637747283144227445846048872827396981618714846041607808894527961589884926717826375606545829921611650828315332514520308321216284988045649055497151258822492086889681693197507354424525084652568575807936580266403659323391730075263096640172968175894563109418679524608471385399283896986966866126663022430111517254363281233243747100471027204628969206326041774639246123247399502693389187256371148606626566177663330670078870190486357813541395762121787777688389773308989704174593957763830050399249679553420441400449730363901401755771218341227431229880886479940988171279948321782074817899031255536750078972392668802651919400144745259218066749857936151806592555674024116010595027018429702758414105877570475611417117036599833231309707576891809525505716503563339498400348913279986639759842094467796548329778179475486843131078992951397062251829343990343673659295643288800824934953581700531959483095671764261759571727676060640445408370626381017904843528940855365139561575439729832678285801167041724081506128562595063166159213979990638998342508398250952431431213064202826939443881110132630307129535305980439918660734788082757340718504992059122481958837273082300919436636757621126165666350551360497642849049477351295894294428449135198514749410132844069985909262810200230156326835113236057643880690968983495182031211632074689059485940062232850112946556653450561669162740084226902471442431499105290482487951308481;
var radToDegRatio = 57.295779513082320876798154814105170332405472466564321549160243861202847148321552632440968995851110944186223381632864893281448264601248315036068267863411942122526388097467267926307988702893110767938261442638263158209610460487020506444259656841120171912057738566280431284962624203376187937297623870790340315980719624089522045186205459923396314841906966220115126609691801514787637366923164107126774038514690165499594192515711986479435210661624389035202306756177796757113315683506205731313360156501348898018788709917776439181159316920013902979768260829323055339702618166049092959328208315499579803195596700711825205846643923179985845671916843991775413165295995305640627904496724872253434072473833065185879008820107193548552060485006842647349075605874388567532932178246602124233132734272129445308916676167146720232313749578448798177290672690849780135188662743955055918580693033438067368971726946398338854651991326756774825764934169233811138243323053208224198516454139597947256714009404178469615156053582157920460213545201901074162102935129261609789844003532238204473276282720909209180171145108905646530208200979123059094023542240418735583708743755384573586329102199472789559821891579523806600517990464578282704945450774576147586229973787943091750642774039848329080615313745597942275155601788148491851894045960939513997198453064355562698180269696033647840185484538981726986038648245358469739466928493874410348419338670826807976466071601804527844317125267416517826117277993857283514535275841382648354898368971954748747942507185719709447566116440117720726362127222472988677461927657595804933383101587608878870095550372645766455563368979539087275993407638846395723135987079792261365385929945673182976018543449376236493162885372501652480562709083094605665945625107099403161908559287259204759085113744496282219561728074051789812133099369970324357691395511633716219273108331509936077800662768516345100374220246196814323220495858888640986043914983747723652484574010381605176839073750058601371498405359642507492781644644190121732551044420397732774741320232751262156675842396231194621847549485685478987579571126983889948718308133490835157019238930664640940596818013843960173669083410375261878587938980076436281892960841778275647074485954160680355133364287619561679420056757716493862578546227081881795684966308392742344713351978118135839374608910272310085338584830102463755620872552970631825281319312337365283290599842519062236556912719990312424402507421309437789027520997038979061332289935044221797356600093343521601891581555584587964656688117715862427044927286062981382067193161017863158253947123135104153039915542996143494810231621952631198538198082143167177922061432944306758841812979138068828858121444512279416007879516138974880659146247947922820706911174048413758621322393219472473052451007496346226959172219846537259723358667499909535079121975390196501172036056581358429972904107985289467826308237392025105394229635882961542482252345622657240377279916049230825460830054057186290990752852667238667620694932212016599084814321691343080601050679642924710758514156768352724363749884404310516155751495092862112800909039697964915993603942411327579094756322456222304583338544424263364008422882518116632048516264956985679353143222949107710215113055633652382003514094439116845895120113434414107638130916146242969144711310519229195679684502418858044391418192652992595780079018527631932581437181452787622968919599977783130636643687190850726980757129323209636572185536948599218784526538307155643930571274643094269840822675092174964370541197821549917747163347415986605665899424997907532508624674001222485690135901101882760684975301175002511367947090662189745921024990427965466094295057965461358464876420719211578544788260854033850092352196897777549978283293857094706622041399100756319508046624955790623793874641296262002365729375623004180362001938688528549279054526808385121808280498314618933705056559784850825675063381118790;

////
// Three.js Configuration
var WIDTH, HEIGHT, mapWidth, mapHeight; //Size variables
var controls; //Orbit controls

var camera, $container, scene, renderer, light, secondaryLight, camLight, projector = new THREE.Projector(); //Scene objects

var loadedGeographies = {};
var mapObject = new THREE.Object3D(); //Object to encompass all of the geographies
var censusQueryCompleted = false;

var preloadedStateData;

var loadedDatasets = []; //Variable to store what datasets have been loaded from the census api for easy access

var mapLoaded = false;

var handleResize = function () { //Function to re-calculate the frame size and reset the projection vectors
    if ($container != undefined) {
        //$container.height(window.innerHeight);
        //$container.width(window.innerWidth);

        WIDTH = $container.width();
        HEIGHT = $container.height();

        renderer.setSize(WIDTH, HEIGHT);

        camera.aspect = WIDTH / HEIGHT;
        camera.updateProjectionMatrix();
    }
}

var mapOffset = new THREE.Vector2(0, -500); //Vector to offset all of the points in the map (0,0 in the svg is in the upper left corner)

var geoType = { county: 'county', state: 'state' }; //Quick access to the different settings; not actually functionally useful 

var currentGeoType = geoType.state //Variable to store the currently selected map type

var svgIndex = { county: 'Data/USCounties.svg', state: 'Data/USStates.svg' }; //The paths to the two svgs

function getQuerystring(key) { //Function to parse the URL and obtain a query string based on the given key
    key = key.toLowerCase();
    key = key.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
    var regex = new RegExp("[\\?&]" + key + "=([^&#]*)");
    var qs = regex.exec(window.location.href.toLowerCase());
    if (qs == null)
        return '';
    else
        return qs[1];
}

//Global error log function
var logError = function (errorMessage, promptUser) {
    console.error(errorMessage);
    if (promptUser == undefined || promptUser == true)
        alert(errorMessage);
}

//Error strings
var errorStrings = {
    censusError: 'There was an error loading data from the Census API.',
    areaLoadingError: 'There was an error loading the area data.',
    shapeDefError: 'There was an error loading the shape definition SVGs.',
    evalError: 'An error occurred while evaluating the formula for geography {geographyName}.'
};

//Extensions
if (!String.prototype.format) {
    String.prototype.format = function () {
        var args = arguments;
        return this.replace(/{(\d+)}/g, function (match, number) {
            return typeof args[number] != 'undefined'
              ? args[number]
              : match
            ;
        });
    };
}

//Function to scale a number from a source scale to a destination scale
var scale = function (value, oldMin, oldMax, newMin, newMax) {
    value -= oldMin;
    value /= oldMax - oldMin;
    value *= newMax - newMin;
    value += newMin;
    return value;
}
custom_math = Object();
custom_math.scale = scale;

//Feel free to append any other available modules directly to this global.
//The modules are checked in order for the first one which contains a
//given math function.
var math_modules = [custom_math, Math, d3];
//Some modules take Arrays, e.g. func([1,2,3,4])
//List here the modules which apply functions to arguments, e.g. func(1,2,3,4)
var math_apply = [custom_math, Math];

//Function to prepare math functions for processing properties
var math_function = function (function_name) {
    var module = null;
    //Find which module contains the given function
    for (var i in math_modules) {
        var this_module = math_modules[i];
        if (this_module.hasOwnProperty(function_name) &&
            typeof (this_module[function_name]) === "function") {
            module = this_module;
            break;
        }
    }
    //If no module is found, publish error and return null function
    if (module === null) {
        logError('No math module was found for ' + String(function_name), true);
        return function () { };
    }
    //2-ary functions might need special handling if given a list
    if (module[function_name].length === 2) {
        //generate a function which wraps around the given function
        return function (arg1, arg2) {
            if (arg1 instanceof Array && arg2 === undefined) {
                if (math_apply.indexOf(module) != -1)
                    //Unwrap the array into arguments if only one array is
                    //given and the module applies its functions
                    return module[function_name].apply(null, arg1);
                else
                    //Passthrough the array into the function
                    return module[function_name](arg1);
            }
            else
                //Passthrough the arguments to the function
                return module[function_name](arg1, arg2)
        };
    }
        //Any other arity might as well use the original function
    else
        return module[function_name]
}

var warningStack = [];
var showWarningBox = function (message, type) {
    warningStack.push({ message: message, type: type });

    $('#warningBox #warningBoxContent').html(message);

    if (type == undefined || type == 'warning') {
        $('#warningBox .svgWarningIcon').css('display', 'block');
        $('#warningBox .svgInfoIcon').css('display', 'none');
    }
    else {
        $('#warningBox .svgWarningIcon').css('display', 'none');
        $('#warningBox .svgInfoIcon').css('display', 'block');
    }

    $('#warningBox').css('display', 'block');
}

var hideWarningBox = function (animate) {
    warningStack.pop();

    function hideAndReset() {
        $('#warningBox').css({ 'width': '' });
        $('#warningBox').css('display', 'none');
    }

    if (warningStack.length > 0) {
        var warningInfo = warningStack.pop();
        showWarningBox(warningInfo.message, warningInfo.type);
    }
    else {
        if (animate)
            $('#warningBox').animate({ width: 0 }, { complete: hideAndReset, easing: 'easeInOutExpo', duration: 700 });
        else
            hideAndReset();
    }
}